
’7Š7type Balancer @entity {
    id: ID!
    color: String!                                      # Bronze, Silver, Gold
    poolCount: Int!                                     # Number of pools
    finalizedPoolCount: Int!                            # Number of finalized pools
    crpCount: Int!                                      # Number of CRP
    pools: [Pool!] @derivedFrom(field: "factoryID")
    txCount: BigInt!                                    # Number of txs
    totalLiquidity: BigDecimal!                         # All the pools liquidity value in USD
    totalSwapVolume: BigDecimal!                        # All the swap volume in USD
    totalSwapFee: BigDecimal!                           # All the swap fee in USD
    totalProtocolFee: BigDecimal!                       # All the protocolFee fee in USD
    totalNetFee: BigDecimal!                            # All the fee in USD
}

type Pool @entity {
    id: ID!                                             # Pool address
    controller: Bytes!                                  # Controller address
    publicSwap: Boolean!                                # isPublicSwap
    finalized: Boolean!                                 # isFinalized
    crp: Boolean!                                       # Is configurable rights pool
    crpController: Bytes                                # CRP controller address
    symbol: String                                      # Pool token symbol
    name: String                                        # Pool token name
    rights: [String!]!                                  # List of rights (for CRP)
    cap: BigInt                                         # Maximum supply if any (for CRP)
    active: Boolean!                                    # isActive
    swapFee: BigDecimal!                                # Swap Fees
    protocolFee: BigDecimal!                            # ProtocolFee
    totalWeight: BigDecimal!
    totalShares: BigDecimal!                            # Total pool token shares
    totalSwapVolume: BigDecimal!                        # Total swap volume in USD
    totalSwapFee: BigDecimal!                           # Total swap fee in USD
    totalProtocolFee: BigDecimal!                       # Total protocol fee in USD
    netFee: BigDecimal!                                 # Different between swap and protocol fee
    totalNetFee: BigDecimal!                            # Different between swap and protocol fee in USD
    liquidity: BigDecimal!                              # Pool liquidity value in USD
    tokensList: [Bytes!]!                               # Temp workaround until graph supports filtering on derived field
    tokens: [PoolToken!] @derivedFrom(field: "poolId")
    shares: [PoolShare!] @derivedFrom(field: "poolId")
    createTime: Int!                                    # Block time pool was created
    tokensCount: BigInt!                                # Number of tokens in the pool
    holdersCount: BigInt!                               # Number of addresses holding a positive balance of BPT
    joinsCount: BigInt!                                 # liquidity has been added
    exitsCount: BigInt!                                 # liquidity has been removed
    swapsCount: BigInt!
    factoryID: Balancer!
    tx: Bytes                                           # Pool creation transaction id
    swaps: [Swap!] @derivedFrom(field: "poolAddress")
    adds: [Add!] @derivedFrom(field: "poolAddress")
    withdraws: [Withdraw!] @derivedFrom(field: "poolAddress")
    admin: Boolean!
    restricted: Boolean!
    unrestricted: Boolean!
}

type PoolToken @entity {
    id: ID!                                             # poolId + token address
    poolId: Pool!
    symbol: String
    name: String
    decimals: Int!
    address: String!
    balance: BigDecimal!
    denormWeight: BigDecimal!
}

type PoolShare @entity {
    id: ID!                                             # poolId + userAddress
    userAddress: User!
    poolId: Pool!
    balance: BigDecimal!
}

type User @entity {
    id: ID!
    sharesOwned: [PoolShare!]  @derivedFrom(field: "userAddress")
    txs: [Transaction!]  @derivedFrom(field: "userAddress")
    swaps: [Swap!]  @derivedFrom(field: "userAddress")
}

type Swap @entity {
    id: ID!                                 #
    caller: Bytes!                          #
    tokenIn: Bytes!                         #
    tokenInSym: String!                     #
    tokenOut: Bytes!                        #
    tokenOutSym: String!                    #
    tokenAmountIn: BigDecimal!              #
    tokenAmountOut: BigDecimal!             #
    poolAddress: Pool
    userAddress: User                       # User address that initiates the swap
    value: BigDecimal!                      # Swap value in USD
    feeValue: BigDecimal!                   # Swap fee value in USD
    poolTotalSwapVolume: BigDecimal!        # Total pool swap volume in USD
    poolTotalSwapFee: BigDecimal!           # Total pool swap fee in USD
    poolTotalProtocolFee: BigDecimal!       # Total pool protocol fee in USD
    poolTotalNetFee: BigDecimal!            # Total pool fee in USD
    poolLiquidity: BigDecimal!              # Pool liquidity value in USD
    timestamp: Int!
    pairSwapVolume: BigDecimal!
}

type SwapPair @entity {
    id: ID!                                 # address of tokenA + tokenB
    swapVolume: BigDecimal!                 # swap volume of tokens pair
}

type Add @entity {
    id: ID!
    poolAddress: Pool
    tokens: [AddToken!] @derivedFrom(field: "addAddress")
    timestamp: Int!
    caller:Bytes!
    userAddress: User                       # User address that initiates the swap
}

type AddToken @entity {
    id: ID!
    addAddress: Add
    tokenIn: Bytes!                         #
    tokenInSym: String!                     #
    tokenAmountIn: BigDecimal!              #
    poolAddress: Pool
}

type Withdraw @entity {
    id: ID!
    poolAddress: Pool
    tokens: [WithdrawToken!] @derivedFrom(field: "withdrawAddress")
    timestamp: Int!
    caller: Bytes!
    userAddress: User                       # User address that initiates the swap
}

type WithdrawToken @entity {
    id: ID!
    withdrawAddress: Withdraw
    tokenOut: Bytes!                         #
    tokenOutSym: String!                     #
    tokenAmountOut: BigDecimal!              #
    poolAddress: Pool
}

type Transaction @entity {
    id: ID!                         # Log ID
    tx: Bytes!
    event: String
    block: Int!
    timestamp: Int!
    gasUsed: BigDecimal!
    gasPrice: BigDecimal!
    poolAddress: Pool
    userAddress: User
    action: SwapType
    sender: Bytes
}

type TokenPrice @entity {
    id: ID!
    symbol: String
    name: String
    decimals: Int!
    price: BigDecimal!
    poolLiquidity: BigDecimal!
    poolTokenId: String
}

enum SwapType {
    swapExactAmountIn,
    swapExactAmountOut,
    joinswapExternAmountIn,
    joinswapPoolAmountOut,
    exitswapPoolAmountIn,
    exitswapExternAmountOut
}Š7